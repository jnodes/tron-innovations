name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

env:
  NODE_VERSION: '18.x'
  REGISTRY_URL: https://registry.npmjs.org

jobs:
  # Code Quality & Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: |
          npm ci --workspaces
          
      - name: Run ESLint
        run: npm run lint --workspaces
        
      - name: Run Prettier Check
        run: npm run format:check --workspaces
        
      - name: Security Audit
        run: |
          npm audit --workspaces
          npm run security:check --workspaces
          
      - name: License Check
        run: npm run license:check --workspaces

  # Unit & Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [tron-ai-swarm, tron-vibe-platform]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          cd ${{ matrix.project }}
          npm ci
          
      - name: Run Unit Tests
        run: |
          cd ${{ matrix.project }}
          npm run test:unit -- --coverage
          
      - name: Run Integration Tests
        run: |
          cd ${{ matrix.project }}
          npm run test:integration
          
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.project }}/coverage/lcov.info
          flags: ${{ matrix.project }}
          
  # Smart Contract Testing
  smart-contract-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install TronBox
        run: npm install -g tronbox
        
      - name: Run Contract Tests
        run: |
          cd tron-ai-swarm/contracts
          tronbox compile
          tronbox test
          
      - name: Gas Usage Report
        run: |
          cd tron-ai-swarm
          npm run contracts:gas-report
          
  # Build & Bundle
  build:
    name: Build Projects
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    strategy:
      matrix:
        project: [tron-ai-swarm, tron-vibe-platform]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          cd ${{ matrix.project }}
          npm ci
          
      - name: Build Project
        run: |
          cd ${{ matrix.project }}
          npm run build
          
      - name: Bundle Size Check
        run: |
          cd ${{ matrix.project }}
          npm run size:check
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}-build
          path: ${{ matrix.project }}/dist/
          
  # Documentation Generation
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Generate API Docs
        run: |
          npm install -g typedoc
          npm run docs:generate --workspaces
          
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          
  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Run Performance Tests
        run: |
          cd tron-ai-swarm
          npm run test:performance
          
      - name: Comment PR with Results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('performance-results.json', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: \`## Performance Test Results\n\\\`\\\`\\\`json\n\${results}\n\\\`\\\`\\\`\`
            });
            
  # Release & Publish
  release:
    name: Release & Publish
    runs-on: ubuntu-latest
    needs: [build, smart-contract-tests]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          
      - name: Install dependencies
        run: npm ci --workspaces
        
      - name: Build All Projects
        run: npm run build --workspaces
        
      - name: Publish to NPM
        run: |
          npm publish --workspaces --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release Assets
        run: |
          zip -r tron-ai-swarm.zip tron-ai-swarm/dist
          zip -r tron-vibe-platform.zip tron-vibe-platform/dist
          
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            tron-ai-swarm.zip
            tron-vibe-platform.zip
            
  # Deploy Preview (for PRs)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./tron-vibe-platform
          
      - name: Comment PR with Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: \`ðŸš€ Preview deployed to: \${process.env.VERCEL_URL}\`
            });
